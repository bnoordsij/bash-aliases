
alias gtt='git status'
alias gtst='git status'
alias gtpl='git pull'
alias gtps='git push'
alias gtups='git push -u origin HEAD'
alias gtsh='git stash'
alias gtspp='git stash pop'

alias gtrh='git reset --hard; '
alias gtr1='git reset HEAD~1; '

alias gtch--='git checkout develop -- '
alias gtch='git checkout '
alias gtchd='git checkout develop; '
alias gtchcu='git checkout automation/composer-update; '
alias gtchct='git checkout request/client-testing; '
alias gtchbm='git checkout automation/base-merge; '
alias gtchm='git checkout master; '

alias gtaa='git commit -a; '
alias gtam='git commit -am '
alias gtcm='git commit -m '
alias gtdf="git diff ':(exclude)composer.lock' ':(exclude)package-lock.json'; "

gtac()
{
    tmp=$@
    gtam $tmp;
}

gtchrel()
{
    out=$(gtchd)
    out=$(gtpl)
    release=
    git branch -a | grep remotes/origin/release | tail -1 | sed 's~remotes/origin/~~' | read release
    if [[ -z $release ]] then;
        echo No release branch found;
        return 1;
        # exit; # this is too hard
    fi
    gtch $release
    out=$(gtpl)
    return 0; # success
}

gmdev()
{
    if [[ $(git rev-parse --abbrev-ref HEAD) == 'develop' ]]; then
        echo 'Already on develop';
        return;
    fi
    has_changes=$(git diff --name-only);
    if [[ ! -z $has_changes ]]; then
        echo "stashing";
        git stash;
    fi
    git checkout develop;
    git pull;
    git checkout -; # this is why we can't be on develop already
    git merge develop; # first merge, than unstash, prevents commiting merge conflicts
    if [[ ! -z $has_changes ]]; then
        git stash pop;
    fi
    rg '<<<<<<' || echo 'rg all good';
}
